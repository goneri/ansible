# Test code for the vmware_host module.
# Copyright: (c) 2017, Abhijeet Kasurde <akasurde@redhat.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- set_fact:
    dc1: dc1
    ccr1: ccr1

# TEARDOWN -- beginning
- name: Remove the datacenter
  vmware_datacenter:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter_name: '{{ dc1 }}'
    state: absent
    validate_certs: no
# TEARDOWN -- end

# Prepare the inventory
- name: register the ESXi hosts (1/2)
  add_host:
    hostname: esxi1
    ansible_host: "{{ vcsim }}"
    ansible_user: user
    ansible_pass: pass
    groups:
    - esxi-lab
  when: vcsim is defined
- name: register the ESXi hosts (2/2)
  add_host:
    hostname: esxi2
    ansible_host: "{{ vcsim }}"
    ansible_user: user
    ansible_pass: pass
    groups:
    - esxi-lab
  when: vcsim is defined

- set_fact:
    esxi1: "{{ groups['esxi-lab'][0] }}"
    esxi2: "{{ groups['esxi-lab'][1] }}"

- name: Create Datacenter
  vmware_datacenter:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter_name: '{{ dc1 }}'
    state: present
    validate_certs: no

- name: Create Cluster
  vmware_cluster:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter_name: '{{ dc1 }}'
    cluster_name: '{{ ccr1 }}'
    validate_certs: no

# Testcase: Add Host
- name: Register the host in the ESXi
  vmware_host:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    esxi_hostname: "{{ hostvars[esxi1].ansible_host }}"
    esxi_username: "{{ hostvars[esxi1].ansible_user }}"
    esxi_password: "{{ hostvars[esxi1].ansible_pass }}"
    datacenter_name: "{{ dc1 }}"
    cluster_name: "{{ ccr1 }}"
    fetch_ssl_thumbprint: False
    state: present
  register: add_host_result

- debug:
    var: add_host_result

- name: ensure host system is present
  assert:
    that:
        - add_host_result is changed

# Testcase: Add Host again
- name: Register the host(s) in the ESXi
  vmware_host:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    esxi_hostname: "{{ hostvars[item].ansible_host }}"
    esxi_username: "{{ hostvars[item].ansible_user }}"
    esxi_password: "{{ hostvars[item].ansible_pass }}"
    datacenter_name: "{{ dc1 }}"
    cluster_name: "{{ ccr1 }}"
    fetch_ssl_thumbprint: False
    state: present
  register: add_host_result
  with_items: "{{ groups['esxi-lab'][0] }}"

- name: ensure precend task didn't changed anything
  assert:
    that:
        - not ( add_host_result is changed)

# Testcase: Add Host via add_or_reconnect state
- name: validate add_or_reconnect
  when: vcsim is not defined
  block:
  - name: add another host via add_or_reconnect
    vmware_host:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      esxi_hostname: "{{ hostvars[esxi2].ansible_host }}"
      esxi_username: "{{ hostvars[esxi2].ansible_user }}"
      esxi_password: "{{ hostvars[esxi2].ansible_pass }}"
      datacenter_name: "{{ dc1 }}"
      cluster_name: "{{ ccr1 }}"
      fetch_ssl_thumbprint: False
      state: add_or_reconnect
    register: add_or_reconnect_host_result
  - name: ensure host system is present
    assert:
      that:
          - add_or_reconnect_host_result is changed

- name: remove first host
  vmware_host:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    esxi_hostname: "{{ hostvars[esxi1].ansible_host }}"
    esxi_username: "{{ hostvars[esxi1].ansible_user }}"
    esxi_password: "{{ hostvars[esxi1].ansible_pass }}"
    datacenter_name: "{{ dc1 }}"
    cluster_name: "{{ ccr1 }}"
    fetch_ssl_thumbprint: False
    state: absent
  register: remove_host_result
- name: ensure host system is absent
  assert:
    that:
        - remove_host_result is changed

- when: vcsim is not defined
  block:

  - name: Create host folder
    vcenter_folder:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      datacenter: "{{ dc1 }}"
      folder_name: "Staging"
      folder_type: host
      state: present
    register: folder_results

  - debug: msg="{{ folder_results }}"

  - name: ensure folder is present
    assert:
      that:
        - folder_results.changed

  - name: Create host folder again
    vcenter_folder:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      datacenter: "{{ dc1 }}"
      folder_name: "Staging"
      folder_type: host
      state: present
    register: folder_results

  - debug: msg="{{ folder_results }}"

  - name: ensure folder is present
    assert:
      that:
        - folder_results.changed == False

  - name: Add host to folder in check mode
    vmware_host:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      esxi_hostname: "{{ hostvars[esxi1].ansible_host }}"
      esxi_username: "{{ hostvars[esxi1].ansible_user }}"
      esxi_password: "{{ hostvars[esxi1].ansible_pass }}"
      datacenter_name: "{{ dc1 }}"
      folder_name: "Staging"
      state: present
    register: add_host_to_folder_result
    check_mode: yes

  - name: Gather cluster facts from given datacenter
    vmware_cluster_facts:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: "{{ dc1 }}"
      validate_certs: no
    register: cluster_facts
  - debug: var=cluster_facts

  - debug: var=hostvars
  - name: Gather vmware host facts
    vmware_host_facts:
      hostname: "{{ hostvars[esxi1].ansible_host }}"
      username: "{{ hostvars[esxi1].ansible_user }}"
      password: "{{ hostvars[esxi1].ansible_pass }}"
      validate_certs: no
    register: host_facts
  - debug: var=host_facts

  - name: Add host to folder
    vmware_host:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      esxi_hostname: "{{ hostvars[esxi1].ansible_host }}"
      esxi_username: "{{ hostvars[esxi1].ansible_user }}"
      esxi_password: "{{ hostvars[esxi1].ansible_pass }}"
      datacenter_name: "{{ dc1 }}"
      folder_name: "Staging"
      state: present
    register: add_host_to_folder_result

  - name: Gather cluster facts from given datacenter
    vmware_cluster_facts:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: "{{ dc1 }}"
      validate_certs: no
    register: cluster_facts
  - debug: var=cluster_facts

  - name: reconnect host
    vmware_host:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      esxi_hostname: "{{ hostvars[esxi2].ansible_host }}"
      datacenter_name: "{{ dc1 }}"
      cluster_name: "{{ ccr1 }}"
      state: reconnect
    register: reconnect_host_result

  - name: ensure host system has been reconnected
    assert:
      that:
        - reconnect_host_result is changed
        # it would be a good idea to check the events on the host to see the reconnect
         # https://github.com/vmware/govmomi/blob/master/govc/USAGE.md#events
         # "govc events ..." need to be callable from
         # https://github.com/ansible/vcenter-test-container/flask_control.py

  # Testcase: Remove Host

  # EnterMaintenanceMode_Task need to be implemented in vcsim for this test to work
  # https://github.com/vmware/govmomi/tree/master/vcsim#supported-methods

  - name: remove host
    vmware_host:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      esxi_hostname: "{{ hostvars[esxi2].ansible_host }}"
      datacenter_name: "{{ dc1 }}"
      cluster_name: "{{ ccr1 }}"
      state: absent
    register: remove_host_result

  - name: ensure host system is absent
    assert:
      that:
        - remove_host_result is changed

  # Testcase: Remove Host again

  # EnterMaintenanceMode_Task need to be implemented in vcsim for this test to work
  # https://github.com/vmware/govmomi/tree/master/vcsim#supported-methods

  - name: remove host again
    vmware_host:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      esxi_hostname: "{{ hostvars[esxi2].ansible_host }}"
      datacenter_name: "{{ dc1 }}"
      cluster_name: "{{ ccr1 }}"
      state: absent
    register: reremove_host_result

  - debug: var=reremove_host_result
  - name: ensure precend task didn't changed anything
    assert:
      that:
        - not ( reremove_host_result is changed)
